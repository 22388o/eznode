#!/bin/bash
set -eo pipefail
source /ez/util.sh

bool_opt "$SSHD" || abort_service
wait_for_bitcoind || exit 0
mkdir -p ~/.ssh /data/ssh-keys

: ${SSHD_ADDR:=$BIND_ADDR}

# Calculate the fingerprint from the pubkey file
fingerprint() {
  # SHA256-base64
  if ! bool_opt "$WEAK_SSH_CHECKSUM"; then
    echo SHA256:$(cut -d' ' -f2 $1 | base64 -d | sha256sum -b | cut -d' ' -f1 | xxd -r -p | base64)
  # MD5-hex (outdated and insecure, but this is what ConnectBot shows ¯\_(ツ)_/¯)
  else echo MD5:$(cut -d' ' -f2 $1 | base64 -d | md5sum -b | cut -d' ' -f1 | sed 's/..\B/&:/g')
  fi
}

# Allow local port forwarding only, unless UNRESTRICTED was set
if [ "$SSHD" != "UNRESTRICTED" ]; then
  : ${DROPBEAR_RESTRICTIONS:="no-pty,no-agent-forwarding,no-X11-forwarding"}
  DROPBEAR_OPTS="$DROPBEAR_OPTS -k" # disable remote port forwarding
  DROPBEAR_FORCED_CMD="echo shell login is disallowed, set SSHD=UNRESTRICTED to permit it"
else
  : ${DROPBEAR_FORCED_CMD=$PWD/ssh-wrapper.sh}
  info ssh Running SSH server in UNRESTRICTED mode. Shell login, X11 forwarding, \
       agent forwarding and remote port forwarding are permitted.
fi

# Backwards compatibility for RSA keys generated by eznode v0.1.0
[ -f /data/ssh-keys/host_rsa.dropbear ] && [ ! -f /data/ssh-keys/host_key.dropbear ] \
  && ln -s /data/ssh-keys/host_rsa.dropbear /data/ssh-keys/host_key.dropbear

# Generate server host key
if [ ! -f /data/ssh-keys/host_key.dropbear ]; then
  info ssh Generating SSH host key to /data/ssh-keys/host_key
  dropbearkey -t ecdsa -s 384 -f /data/ssh-keys/host_key.dropbear \
    | tail -n2 | head -n1 > /data/ssh-keys/host_key.pub
fi

# Setup authorized client keys. There are three ways to do this:
# 1. Mount /root/.ssh/authorized_keys
# 2. Mount the client's public key into /root/id.pub
# 3. Don't mount anything and a new key will automatically be generated into /data/ssh-keys
if mountpoint -q ~/.ssh/authorized_keys; then
  info ssh Authorizing client pubkeys mounted in /root/.ssh/authorized_keys
  [ -n "$DROPBEAR_RESTRICTIONS" ] && warn ssh The $DROPBEAR_RESTRICTIONS restrictions will not be applied \
    to your custom authorized_keys file. You may add them yourself. Login is still disallowed.
else
  if [ -f ~/id.pub ]; then
    info ssh "Authorizing client pubkey mounted in /root/id.pub ($(fingerprint ~/id.pub))"
    cp ~/id.pub ~/.ssh/authorized_keys

  elif [ -f /data/ssh-keys/client_ecdsa.pub ]; then
    info ssh "Authorizing client pubkey in /data/ssh-keys/client_ecdsa.pub ($(fingerprint /data/ssh-keys/client_ecdsa.pub))"
    cp /data/ssh-keys/client_ecdsa.pub ~/.ssh/authorized_keys

  elif [ -f /data/ssh-keys/client_rsa.pub ]; then
    # For backwards compatibility with eznode v0.1.0
    info ssh "Authorizing client pubkey in /data/ssh-keys/client_rsa.pub ($(fingerprint /data/ssh-keys/client_rsa.pub))"
    cp /data/ssh-keys/client_rsa.pub ~/.ssh/authorized_keys

  else
    info ssh Generating SSH client key to /data/ssh-keys/client_ecdsa
    dropbearkey -t ecdsa -s 384 -f /data/ssh-keys/client_ecdsa.dropbear \
      | tail -n2 | head -n1 | tee /data/ssh-keys/client_ecdsa.pub > ~/.ssh/authorized_keys
    # Convert dropbear's private key format into openssh's
    dropbearconvert dropbear openssh /data/ssh-keys/client_ecdsa.dropbear /data/ssh-keys/client_ecdsa 2> /dev/null
    rm /data/ssh-keys/client_ecdsa.dropbear
    info ssh "Authorized new SSH client key ($(fingerprint /data/ssh-keys/client_ecdsa.pub))"
    info ssh You can login using the private key at $GREEN$BOLD/data/ssh-keys/client_ecdsa$RESTORE
  fi
  [ -n "$DROPBEAR_RESTRICTIONS" ] && sed -i "s|^|$DROPBEAR_RESTRICTIONS |" ~/.ssh/authorized_keys
fi

chown root:root ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys
debug ssh Authorized keys:$'\n'"$(cat ~/.ssh/authorized_keys)"

info ssh "${ORANGE}Verify the host's SSH key fingerprint on the first connection:$RESTORE" \
         "$BOLD$GREEN$(fingerprint /data/ssh-keys/host_key.pub)$RESTORE"

# Start
info ssh Starting Dropbear SSH server on $SSHD_ADDR:2222 $([ "$SSHD" != "UNRESTRICTED" ] && echo '(port tunneling only)')
signal_readiness

# -F  Don't fork into background
# -E  Log to stderr rather than syslog
# -s  Disable password logins
# -p  listen [address:]port
# -r  host key file
exec dropbear -FEs -p $SSHD_ADDR:2222 -r /data/ssh-keys/host_key.dropbear \
  "$([ -n "$DROPBEAR_FORCED_CMD" ] && echo "-c$DROPBEAR_FORCED_CMD")" \
  $DROPBEAR_OPTS 2>&1
